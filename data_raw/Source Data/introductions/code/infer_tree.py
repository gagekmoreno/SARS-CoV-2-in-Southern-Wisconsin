import subprocess
import shlex
from Bio import Phylo
from Bio import SeqIO
from Bio.Seq import Seq
import matplotlib.pyplot as plt
import treetime as tt
from treetime import TreeTime
from treetime import wrappers
from treetime.utils import parse_dates
import pandas as pd
import argparse


def format_seq_name(seq_name):
	return(seq_name.replace('hCoV-19/', '').split('|')[0].replace(' ', ''))


def find_closest_neighbors(global_tree_path, global_aln_path, wi_file, exclude_file, date_dict):
	wi_tips = pd.read_csv(wi_file)
	tre = Phylo.read(global_tree_path, 'newick')
	outgroup = [item for item in tre.get_terminals() if 
				'Wuhan/WH01/2019' in item.name][0]
	tre.root_with_outgroup(outgroup)
	exclude = pd.read_csv(exclude_file, comment='#', header=None)
	# finds tips in tree without good dates in metadata file
	# finds tips which are included in the nextstrain global alignment
	# these sequences have already passed filtering threshold
	global_aligned = list(SeqIO.parse(global_aln_path, 'fasta'))
	global_aligned_tips = set([item.name for item in global_aligned])
	# items which are not in the nextstrain alignment get pruned from tree
	remove_tips = set([item for item in tre.get_terminals() if
						   format_seq_name(item.name) not in global_aligned_tips])
	# removes these tips from the global tree
	for tip in remove_tips:
		_ = tre.prune(tip)
	neighbors = []
	# tips from DANE/MKE
	wi_terminals = [item for item in tre.get_terminals() if 
					format_seq_name(item.name) in set(wi_tips['Sample Name'])]
	# find closest neighbor
	for k in wi_terminals:
		curr_item_parent = tre.get_path(k)[-2]
		# get other descendant from parent
		# not strictly robust in the case of polytomies
		neighbor = \
			[item.name for item in curr_item_parent.get_terminals() if item != k][0]
		neighbors.append(neighbor)
	pd.DataFrame(neighbors).to_csv('results/closest_neighbors.csv', index=False, header=None)
	return(neighbors)


def add_neighbors_to_aln(subsampled_aln_file, global_aln_file, neighbors):
	neighbors = set([format_seq_name(item) for item in neighbors])
	# read in the original subsampled alignment
	subsampled_aln = list(SeqIO.parse(subsampled_aln_file, 'fasta'))
	subsampled_aln_names = set([item.name for item in subsampled_aln])
	global_aln = list(SeqIO.parse(global_aln_file, 'fasta'))
	# get alignments of the cloest neighbors from the global alignment
	neighbors_aln = [item for item in global_aln if 
						item.name in neighbors and 
						item.name not in subsampled_aln_names]
	subsampled_neighbors_aln = subsampled_aln+neighbors_aln
	out_name = subsampled_aln_file.replace('.fasta', '_neighbors.fasta')
	with open(out_name, 'w') as out:
		SeqIO.write(subsampled_neighbors_aln, out, 'fasta')
	return(out_name)


def infer_phylogeny(aln):
	#-czb (collapse small branches)
	# -wbtl (write ufboot trees`)
	# -me 0.05 (LogL epsilon for parameter estimation)
	iqtree_cmd = f'iqtree -redo -nt 4 -ninit 10 -me 0.05 -bb 1000 -wbtl \
				  -czb -m GTR --prefix {aln.replace("data", "results")} -s {aln}'
	subprocess.run(shlex.split(iqtree_cmd))
	return(aln+'.treefile', aln+'.ufboot')


def main():
	parser = argparse.ArgumentParser()
	parser.add_argument('--global_aln_file', 
						help='alignment of all global sequences, from Augur',
						default='data/aligned.fasta')
	parser.add_argument('--subsampled_aln_file', 
						help='downsampled and masked alignment', 
						default='data/subsampled_alignment.fasta')
	parser.add_argument('--global_tree_file',
						help='phylogenetic tree of all sequences, here using the one generated by Rob Lanfear',
						default='data/full_global_tree.newick')
	parser.add_argument('--metadata_file',
						help='metadata file',
						default='data/metadata_adjusted.tsv')
	parser.add_argument('--exclude_file',
						help='file with list of sequences to exclude, from Nextstrain',
						default='data/exclude.txt')
	parser.add_argument('--mke_dane_file',
					help='file with list of sequences from Dane and MKE',
					default='data/MKEvsDane.csv')
	args = parser.parse_args()
	# TODO make arguments
	# global tree from Rob Lanf
	# https://github.com/roblanf/sarscov2phylo/
	date_dict = parse_dates(args.metadata_file)
	neighbors = find_closest_neighbors(args.global_tree_file, args.global_aln_file, 
									   args.mke_dane_file, args.exclude_file, date_dict)
	# todo print these to stderr
	print('closest neighbors found')
	subsampled_neighbors_aln_file = add_neighbors_to_aln(args.subsampled_aln_file, 
												  		 args.global_aln_file, neighbors)
	print('neighbors added to alignment')
	tre_file, bootstrap_tre_file =  infer_phylogeny(subsampled_neighbors_aln_file)
	print('tree inferred')


if __name__ == "__main__":
	main()
